spring.application.name: inventory
server.port: 8085

spring:
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://127.0.0.1:5432/inventory
    username: topicos
    password: topicos

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/topicos
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database: postgresql

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

logging:
  level:
    org:
      springframework:
        security: DEBUG
        oauth2: DEBUG

#spring.cloud.function.definition: consumeMessage

#spring.cloud.stream:
#  defaultBinder: rabbit
#  default.contentType: application/json
#  bindings.consumeMessage-in-0:
#    destination: inventory
#    group: inventoriesGroup

#spring.cloud.stream.bindings.messageConsumer-in-0.consumer:
#  maxAttempts: 3
#  backOffInitialInterval: 500
#  backOffMaxInterval: 1000
#  backOffMultiplier: 2.0
#
#spring.cloud.stream.rabbit.bindings.messageConsumer-in-0.consumer:
#  autoBindDlq: true
#  republishToDlq: true

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

---
spring.config.activate.on-profile: docker
eureka:
  client:
    serviceUrl:
      defaultZone: http://discovery:8761/eureka/

spring.rabbitmq:
  host: message
  port: 5672
  username: guest
  password: guest

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/topicos
          jwk-set-uri: http://keycloak:8080/realms/topicos/protocol/openid-connect/certs
